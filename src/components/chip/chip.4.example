{
    #[function_component(ClosableChips)]
    fn closable_chips() -> Html {
        use yew::prelude::*;

        let options = use_state(|| vec!["Foo", "Bar", "Baz"]);
        let close = |idx| {
            let options = options.clone();
            Callback::from(move |_| {
                let mut new_options = (*options).clone();
                new_options.remove(idx);
                options.set(new_options);
            })
        };
        html! {
            <>
                { for options.iter().enumerate().map(|(idx, text)| html_nested!(
                    <Chip text={text.to_string()} onclose={close(idx)}/>
                ))}
            </>
        }
    }
    html!(<ClosableChips/>)
}
