{
    #[function_component(Example)]
    fn example() -> Html {
        let entries = use_memo((), |()| {
            vec![
                ExampleEntry { foo: "bar".into() },
                ExampleEntry {
                    foo: "Much, much longer foo".into(),
                },
            ]
        });

        let (entries, _) = use_table_data(MemoizedTableModel::new(entries));

        let header = html_nested! {
            <TableHeader<Columns>>
                <TableColumn<Columns> label="foo" index={Columns::First} />
                <TableColumn<Columns> label="bar" index={Columns::Second} />
                <TableColumn<Columns> label="baz" index={Columns::Third} />
            </TableHeader<Columns>>
        };

        let selected = use_state(|| None);

        let onrowclick = use_callback(selected.clone(), |entry: ExampleEntry, selected| {
            selected.set(Some(entry.clone()))
        });
        let row_selected = use_callback(selected.clone(), |entry: ExampleEntry, selected| {
            **selected == Some(entry)
        });

        html! (
            <Table<Columns, UseTableData<Columns, MemoizedTableModel<ExampleEntry>>>
                caption="Table caption"
                {header}
                {entries}
                {onrowclick}
                {row_selected}
            />
        )
    }

    html!(<Example/>)
}
