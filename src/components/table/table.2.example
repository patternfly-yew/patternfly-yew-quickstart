{
#[function_component(Example)]
fn example() -> Html {
    let entries = use_memo(|()| vec![
         ExampleEntry { foo: "bar".into() },
         ExampleEntry {
             foo: "Much, much longer foo".into(),
         },
    ], ());
    let (entries, _) = use_table_data(MemoizedTableModel::new(entries));

    let header = html_nested! {
        <TableHeader<Columns>>
            <TableColumn<Columns> label="foo" index={Columns::First} />
            <TableColumn<Columns> label="bar" index={Columns::Second} />
            <TableColumn<Columns> label="baz" index={Columns::Third} />
        </TableHeader<Columns>>
    };

    html!(
        <Table<Columns, UseTableData<Columns, MemoizedTableModel<ExampleEntry>>>
            mode={TableMode::Compact}
            {header}
            {entries}
        />
    )
}

html!(<Example/>)

}